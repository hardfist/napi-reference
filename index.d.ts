/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare class ExternalObject<T> {
  readonly '': {
    readonly '': unique symbol
    [K: symbol]: T
  }
}
export declare namespace async_fn {
  function asyncFn(): Promise<void>
  function asyncFn1(): Promise<void>
  function asyncFn2(callback: ((arg: string) => void)): void
}
export declare namespace _class {
  export class Counter {
    cnt: number
    constructor(init: number)
    add(by: number): number
    get(): number
  }
}
export declare namespace external {
  export class Compiler {
    constructor()
    createCompilation(): ExternalObject<Compilation>
  }
}
export declare namespace external_value {
  export interface Counter {
    cnt: number
  }
  function createCounter(init: number): ExternalObject<Counter>
  function addCounter(counter: ExternalObject<Counter>, by: number): number
  function printExternal(counter: ExternalObject<Counter>): void
}
export declare namespace reference {
  export class Compiler {
    constructor(compilation: Compilation)
  }
  export class Compilation {
    constructor()
  }
}
export declare namespace reference_callback {
  export class Compiler {
    constructor(callback: () => void)
    run(): void
  }
}
export declare namespace tsfn {
  export class Counter {
    constructor(callback: ((arg: number) => void))
    add(val: number): void
  }
}
export declare namespace value {
  export interface Counter {
    cnt: number
  }
  function createCounter(init: number): Counter
  function fromJsClone(counter: Counter): Counter
  function fromJsSerde(counter: object): Counter
}
export declare namespace nested_call {
  export class Compiler {
    getAssetPath(n: number): number
    callAsssetPathHook(n: number): number
  }
}
